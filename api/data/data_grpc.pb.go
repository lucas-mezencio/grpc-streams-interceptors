// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: data.proto

package data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataClient is the client API for Data service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataClient interface {
	GetByID(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (Data_GetAllClient, error)
	SendAll(ctx context.Context, opts ...grpc.CallOption) (Data_SendAllClient, error)
	SandAndGetAll(ctx context.Context, opts ...grpc.CallOption) (Data_SandAndGetAllClient, error)
}

type dataClient struct {
	cc grpc.ClientConnInterface
}

func NewDataClient(cc grpc.ClientConnInterface) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) GetByID(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.Data/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (Data_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &Data_ServiceDesc.Streams[0], "/proto.Data/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Data_GetAllClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type dataGetAllClient struct {
	grpc.ClientStream
}

func (x *dataGetAllClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataClient) SendAll(ctx context.Context, opts ...grpc.CallOption) (Data_SendAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &Data_ServiceDesc.Streams[1], "/proto.Data/SendAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataSendAllClient{stream}
	return x, nil
}

type Data_SendAllClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type dataSendAllClient struct {
	grpc.ClientStream
}

func (x *dataSendAllClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataSendAllClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataClient) SandAndGetAll(ctx context.Context, opts ...grpc.CallOption) (Data_SandAndGetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &Data_ServiceDesc.Streams[2], "/proto.Data/SandAndGetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataSandAndGetAllClient{stream}
	return x, nil
}

type Data_SandAndGetAllClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type dataSandAndGetAllClient struct {
	grpc.ClientStream
}

func (x *dataSandAndGetAllClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataSandAndGetAllClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataServer is the server API for Data service.
// All implementations must embed UnimplementedDataServer
// for forward compatibility
type DataServer interface {
	GetByID(context.Context, *Request) (*Response, error)
	GetAll(*Request, Data_GetAllServer) error
	SendAll(Data_SendAllServer) error
	SandAndGetAll(Data_SandAndGetAllServer) error
	mustEmbedUnimplementedDataServer()
}

// UnimplementedDataServer must be embedded to have forward compatible implementations.
type UnimplementedDataServer struct {
}

func (UnimplementedDataServer) GetByID(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedDataServer) GetAll(*Request, Data_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedDataServer) SendAll(Data_SendAllServer) error {
	return status.Errorf(codes.Unimplemented, "method SendAll not implemented")
}
func (UnimplementedDataServer) SandAndGetAll(Data_SandAndGetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method SandAndGetAll not implemented")
}
func (UnimplementedDataServer) mustEmbedUnimplementedDataServer() {}

// UnsafeDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServer will
// result in compilation errors.
type UnsafeDataServer interface {
	mustEmbedUnimplementedDataServer()
}

func RegisterDataServer(s grpc.ServiceRegistrar, srv DataServer) {
	s.RegisterService(&Data_ServiceDesc, srv)
}

func _Data_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Data/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetByID(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServer).GetAll(m, &dataGetAllServer{stream})
}

type Data_GetAllServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type dataGetAllServer struct {
	grpc.ServerStream
}

func (x *dataGetAllServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Data_SendAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServer).SendAll(&dataSendAllServer{stream})
}

type Data_SendAllServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type dataSendAllServer struct {
	grpc.ServerStream
}

func (x *dataSendAllServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataSendAllServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Data_SandAndGetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServer).SandAndGetAll(&dataSandAndGetAllServer{stream})
}

type Data_SandAndGetAllServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type dataSandAndGetAllServer struct {
	grpc.ServerStream
}

func (x *dataSandAndGetAllServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataSandAndGetAllServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Data_ServiceDesc is the grpc.ServiceDesc for Data service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Data_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByID",
			Handler:    _Data_GetByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _Data_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendAll",
			Handler:       _Data_SendAll_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SandAndGetAll",
			Handler:       _Data_SandAndGetAll_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "data.proto",
}
